/*
 IPMEMS DATABASE MODEL
 ********************************************
 (c) 2011 ipsilon-pro software research group
 ********************************************
*/

SET DATABASE DEFAULT TABLE TYPE CACHED;
CREATE SCHEMA IPMEMS AUTHORIZATION DBA;
SET SCHEMA IPMEMS;
SET INITIAL SCHEMA IPMEMS;
SET DATABASE DEFAULT INITIAL SCHEMA IPMEMS;
SET FILES NIO FALSE;
SET FILES WRITE DELAY TRUE;
SET FILES LOG SIZE 16;
SET FILES SCALE 128;
SET DATABASE TRANSACTION CONTROL LOCKS;

CREATE TABLE ipLocation (
	id			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	loc_id		BIGINT,
	code		LONGVARCHAR,
	label		LONGVARCHAR,
	mnemonic	LONGVARCHAR,
	coord1		DOUBLE,
	coord2		DOUBLE,
	coord3		DOUBLE,
	coord4		DOUBLE,
	coord5		DOUBLE,
	reg_id		BIGINT,
	xml			LONGVARCHAR,
	FOREIGN KEY (loc_id) REFERENCES ipLocation (id)
);

CREATE TABLE ipObjectType (
	id			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	code		LONGVARCHAR,
	label		LONGVARCHAR,
	mnemonic	LONGVARCHAR,
	reg_id		BIGINT,
	xml			LONGVARCHAR
);

CREATE TABLE ipSubjectType (
	id			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	code		LONGVARCHAR,
	label		LONGVARCHAR,
	mnemonic	LONGVARCHAR,
	reg_id		BIGINT,
	xml			LONGVARCHAR
);

CREATE TABLE ipObject (
	id			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	obj_type	BIGINT,
	code		LONGVARCHAR,
	label		LONGVARCHAR,
	mnemonic	LONGVARCHAR,
	reg_id		BIGINT,
	xml			LONGVARCHAR,
	FOREIGN KEY (obj_type) REFERENCES ipObjectType (id)
);

CREATE TABLE ipSubject (
	id			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	subj_type	BIGINT,
	code		LONGVARCHAR,
	label		LONGVARCHAR,
	mnemonic	LONGVARCHAR,
	reg_id		BIGINT,
	xml			LONGVARCHAR,
	FOREIGN KEY (subj_type) REFERENCES ipSubjectType (id)
);

CREATE TABLE ipRelationType (
	id			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	code		LONGVARCHAR,
	label		LONGVARCHAR,
	mnemonic	LONGVARCHAR,
	reg_id		BIGINT,
	xml			LONGVARCHAR
);

CREATE TABLE ipObjectRelation (
	obj1_id		BIGINT,
	obj2_id		BIGINT,
	rel_type	BIGINT,
	reg_id		BIGINT,
	xml			LONGVARCHAR,
	FOREIGN KEY (obj1_id) REFERENCES ipObject (id),
	FOREIGN KEY (obj2_id) REFERENCES ipObject (id),
	FOREIGN KEY (rel_type) REFERENCES ipRelationType (id)
);

CREATE TABLE ipSubjectRelation (
	sub1_id		BIGINT,
	sub2_id		BIGINT,
	rel_type	BIGINT,
	reg_id		BIGINT,
	xml			LONGVARCHAR,
	FOREIGN KEY (sub1_id) REFERENCES ipSubject (id),
	FOREIGN KEY (sub2_id) REFERENCES ipSubject (id),
	FOREIGN KEY (rel_type) REFERENCES ipRelationType (id)
);

CREATE TABLE ipRelation (
	obj_id		BIGINT,
	subj_id		BIGINT,
	reverse		BOOLEAN,
	rel_type	BIGINT,
	reg_id		BIGINT,
	xml			LONGVARCHAR,
	FOREIGN KEY (obj_id) REFERENCES ipObject (id),
	FOREIGN KEY (subj_id) REFERENCES ipSubject (id),
	FOREIGN KEY (rel_type) REFERENCES ipRelationType (id)
);

CREATE TABLE ipPhysical (
	id			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	label		LONGVARCHAR,
	mnemonic	LONGVARCHAR,
	iso			LONGVARCHAR,
	reg_id		BIGINT,
	xml			LONGVARCHAR
);

CREATE TABLE ipUnit (
	id			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	physical_id	BIGINT,
	label		LONGVARCHAR,
	mnemonic	LONGVARCHAR,
	formula		LONGVARCHAR,
	rformula	LONGVARCHAR,
	engine		LONGVARCHAR,
	reg_id		BIGINT,
	xml			LONGVARCHAR,
	FOREIGN KEY (physical_id) REFERENCES ipPhysical (id)
);

CREATE TABLE ipTag (
	id			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	obj_id		BIGINT,
	unit_id		BIGINT,
	label		LONGVARCHAR,
	mnemonic	LONGVARCHAR,
	reg_id		BIGINT,
	xml			LONGVARCHAR,
	FOREIGN KEY (obj_id) REFERENCES ipObject (id) ,
	FOREIGN KEY (unit_id) REFERENCES ipUnit (id)
);

CREATE TABLE ipArchiveRecordType (
	id			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	t_scale		INTEGER DEFAULT 1,
	mnemonic	LONGVARCHAR,
	reg_id		BIGINT,
	xml			LONGVARCHAR
);

CREATE TABLE ipTagType (
	tag_id		BIGINT,
	rec_type	BIGINT,
	FOREIGN KEY (tag_id) REFERENCES ipTag (id),
	FOREIGN KEY (rec_type) REFERENCES ipArchiveRecordType (id)
);

CREATE TABLE ipSimpleLog (
	code		LONGVARCHAR,
	t			TIMESTAMP,
	arg1		LONGVARCHAR,
	arg2		LONGVARCHAR,
	arg3		LONGVARCHAR,
	misc		LONGVARCHAR ARRAY,
	CONSTRAINT lsimplec UNIQUE (t, code)
);

/* NEW TABLES */

CREATE TABLE ipTmpDblNumStore (id BIGINT, t TIMESTAMP, val DOUBLE, CONSTRAINT stmdc UNIQUE (id, t));
CREATE TABLE ipTmpStringStore (id BIGINT, t TIMESTAMP, val LONGVARCHAR, CONSTRAINT stmtc UNIQUE (id, t));
CREATE TABLE ipTmpAtomStore (id BIGINT, t TIMESTAMP, val VARCHAR(65536), CONSTRAINT stmac UNIQUE (id, t));
CREATE TABLE ipTmpBoolStore (id BIGINT, t TIMESTAMP, val BOOLEAN, CONSTRAINT stmlc UNIQUE (id, t));
CREATE TABLE ipTmpDateStore (id BIGINT, t TIMESTAMP, val TIMESTAMP, CONSTRAINT stmyc UNIQUE (id, t));
CREATE TABLE ipTmpLongNumStore (id BIGINT, t TIMESTAMP, val BIGINT, CONSTRAINT stmhc UNIQUE (id, t));

CREATE TABLE ipDblNumStore (id BIGINT, t TIMESTAMP, val DOUBLE);
CREATE TABLE ipStringStore (id BIGINT, t TIMESTAMP, val LONGVARCHAR);
CREATE TABLE ipAtomStore (id BIGINT, t TIMESTAMP, val VARCHAR(65536));
CREATE TABLE ipBoolStore (id BIGINT, t TIMESTAMP, val BOOLEAN);
CREATE TABLE ipDateStore (id BIGINT, t TIMESTAMP, val TIMESTAMP);
CREATE TABLE ipLongNumStore (id BIGINT, t TIMESTAMP, val BIGINT);

CREATE INDEX ipDblNumStoreIdx ON ipDblNumStore (id, t);
CREATE INDEX ipStringStoreIdx ON ipStringStore (id, t);
CREATE INDEX ipAtomStoreIdx ON ipAtomStore (id, t);
CREATE INDEX ipBoolStoreIdx ON ipBoolStore (id, t);
CREATE INDEX ipDateStoreIdx ON ipDateStore (id, t);
CREATE INDEX ipLongNumStoreIdx ON ipLongNumStore (id, t);

CREATE TABLE ipDblNumArrStore (id BIGINT, t TIMESTAMP, val DOUBLE ARRAY);
CREATE TABLE ipStringArrStore (id BIGINT, t TIMESTAMP, val LONGVARCHAR ARRAY);
CREATE TABLE ipAtomArrStore (id BIGINT, t TIMESTAMP, val VARCHAR(65536) ARRAY);
CREATE TABLE ipBoolArrStore (id BIGINT, t TIMESTAMP, val BOOLEAN ARRAY);
CREATE TABLE ipDateArrStore (id BIGINT, t TIMESTAMP, val TIMESTAMP ARRAY);
CREATE TABLE ipLongNumArrStore (id BIGINT, t TIMESTAMP, val BIGINT ARRAY);

CREATE INDEX ipDblNumArrStoreIdx ON ipDblNumArrStore (id, t);
CREATE INDEX ipStringArrStoreIdx ON ipStringArrStore (id, t);
CREATE INDEX ipAtomArrStoreIdx ON ipAtomArrStore (id, t);
CREATE INDEX ipBoolArrStoreIdx ON ipBoolArrStore (id, t);
CREATE INDEX ipDateArrStoreIdx ON ipDateArrStore (id, t);
CREATE INDEX ipLongNumArrStoreIdx ON ipLongNumArrStore (id, t);

CREATE TABLE ipDynDblNumStore (id BIGINT, t TIMESTAMP, val DOUBLE, CONSTRAINT sxdc UNIQUE (id));
CREATE TABLE ipDynStringStore (id BIGINT, t TIMESTAMP, val LONGVARCHAR, CONSTRAINT sxtc UNIQUE (id));
CREATE TABLE ipDynAtomStore (id BIGINT, t TIMESTAMP, val VARCHAR(65536), CONSTRAINT sxac UNIQUE (id));
CREATE TABLE ipDynBoolStore (id BIGINT, t TIMESTAMP, val BOOLEAN, CONSTRAINT sxlc UNIQUE (id));
CREATE TABLE ipDynDateStore (id BIGINT, t TIMESTAMP, val TIMESTAMP, CONSTRAINT sxyc UNIQUE (id));
CREATE TABLE ipDynLongNumStore (id BIGINT, t TIMESTAMP, val BIGINT, CONSTRAINT sxhc UNIQUE (id));

CREATE TABLE ipDynDblNumArrStore (id BIGINT, t TIMESTAMP, val DOUBLE ARRAY, CONSTRAINT sxdac UNIQUE (id));
CREATE TABLE ipDynStringArrStore (id BIGINT, t TIMESTAMP, val LONGVARCHAR ARRAY, CONSTRAINT sxtac UNIQUE (id));
CREATE TABLE ipDynAtomArrStore (id BIGINT, t TIMESTAMP, val VARCHAR(65536) ARRAY, CONSTRAINT sxaac UNIQUE (id));
CREATE TABLE ipDynBoolArrStore (id BIGINT, t TIMESTAMP, val BOOLEAN ARRAY, CONSTRAINT sxlac UNIQUE (id));
CREATE TABLE ipDynDateArrStore (id BIGINT, t TIMESTAMP, val TIMESTAMP ARRAY, CONSTRAINT sxyac UNIQUE (id));
CREATE TABLE ipDynLongNumArrStore (id BIGINT, t TIMESTAMP, val BIGINT ARRAY, CONSTRAINT sxhac UNIQUE (id));

CREATE TABLE ipRepDynDblNumStore (id BIGINT, t TIMESTAMP, val DOUBLE, CONSTRAINT srxdc UNIQUE (id));
CREATE TABLE ipRepDynStringStore (id BIGINT, t TIMESTAMP, val LONGVARCHAR, CONSTRAINT srxtc UNIQUE (id));
CREATE TABLE ipRepDynAtomStore (id BIGINT, t TIMESTAMP, val VARCHAR(65536), CONSTRAINT srxac UNIQUE (id));
CREATE TABLE ipRepDynBoolStore (id BIGINT, t TIMESTAMP, val BOOLEAN, CONSTRAINT srxlc UNIQUE (id));
CREATE TABLE ipRepDynDateStore (id BIGINT, t TIMESTAMP, val TIMESTAMP, CONSTRAINT srxyc UNIQUE (id));
CREATE TABLE ipRepDynLongNumStore (id BIGINT, t TIMESTAMP, val BIGINT, CONSTRAINT srxhc UNIQUE (id));

CREATE TABLE ipRepDynDblNumArrStore (id BIGINT, t TIMESTAMP, val DOUBLE ARRAY, CONSTRAINT srxdac UNIQUE (id));
CREATE TABLE ipRepDynStringArrStore (id BIGINT, t TIMESTAMP, val LONGVARCHAR ARRAY, CONSTRAINT srxtac UNIQUE (id));
CREATE TABLE ipRepDynAtomArrStore (id BIGINT, t TIMESTAMP, val VARCHAR(65536) ARRAY, CONSTRAINT srxaac UNIQUE (id));
CREATE TABLE ipRepDynBoolArrStore (id BIGINT, t TIMESTAMP, val BOOLEAN ARRAY, CONSTRAINT srxlac UNIQUE (id));
CREATE TABLE ipRepDynDateArrStore (id BIGINT, t TIMESTAMP, val TIMESTAMP ARRAY, CONSTRAINT srxyac UNIQUE (id));
CREATE TABLE ipRepDynLongNumArrStore (id BIGINT, t TIMESTAMP, val BIGINT ARRAY, CONSTRAINT srxhac UNIQUE (id));

CREATE TABLE ipRepDblNumStore (id BIGINT, t TIMESTAMP, val DOUBLE);
CREATE TABLE ipRepStringStore (id BIGINT, t TIMESTAMP, val LONGVARCHAR);
CREATE TABLE ipRepAtomStore (id BIGINT, t TIMESTAMP, val VARCHAR(65536));
CREATE TABLE ipRepBoolStore (id BIGINT, t TIMESTAMP, val BOOLEAN);
CREATE TABLE ipRepDateStore (id BIGINT, t TIMESTAMP, val TIMESTAMP);
CREATE TABLE ipRepLongNumStore (id BIGINT, t TIMESTAMP, val BIGINT);

CREATE INDEX ipRepDblNumStoreIdx ON ipRepDblNumStore (id, t);
CREATE INDEX ipRepStringStoreIdx ON ipRepStringStore (id, t);
CREATE INDEX ipRepAtomStoreIdx ON ipRepAtomStore (id, t);
CREATE INDEX ipRepBoolStoreIdx ON ipRepBoolStore (id, t);
CREATE INDEX ipRepDateStoreIdx ON ipRepDateStore (id, t);
CREATE INDEX ipRepLongNumStoreIdx ON ipRepLongNumStore (id, t);

CREATE TABLE ipRepDblNumArrStore (id BIGINT, t TIMESTAMP, val DOUBLE ARRAY);
CREATE TABLE ipRepStringArrStore (id BIGINT, t TIMESTAMP, val LONGVARCHAR ARRAY);
CREATE TABLE ipRepAtomArrStore (id BIGINT, t TIMESTAMP, val VARCHAR(65536) ARRAY);
CREATE TABLE ipRepBoolArrStore (id BIGINT, t TIMESTAMP, val BOOLEAN ARRAY);
CREATE TABLE ipRepDateArrStore (id BIGINT, t TIMESTAMP, val TIMESTAMP ARRAY);
CREATE TABLE ipRepLongNumArrStore (id BIGINT, t TIMESTAMP, val BIGINT ARRAY);

CREATE INDEX ipRepDblNumArrStoreIdx ON ipRepDblNumArrStore (id, t);
CREATE INDEX ipRepStringArrStoreIdx ON ipRepStringArrStore (id, t);
CREATE INDEX ipRepAtomArrStoreIdx ON ipRepAtomArrStore (id, t);
CREATE INDEX ipRepBoolArrStoreIdx ON ipRepBoolArrStore (id, t);
CREATE INDEX ipRepDateArrStoreIdx ON ipRepDateArrStore (id, t);
CREATE INDEX ipRepLongNumArrStoreIdx ON ipRepLongNumArrStore (id, t);

CREATE TABLE ipLog (aid BIGINT, t TIMESTAMP, msg VARCHAR(512), arg LONGVARCHAR ARRAY, CONSTRAINT logc UNIQUE (aid, t));
CREATE INDEX ipLogIdx ON ipLog (t);

CREATE TABLE ipCmd (aid BIGINT, t TIMESTAMP, id BIGINT, arg VARCHAR(1024), CONSTRAINT cc UNIQUE (aid, t));
CREATE TABLE ipCmdResult (aid BIGINT, t TIMESTAMP, cid BIGINT, id BIGINT, arg VARCHAR(1024), CONSTRAINT crc UNIQUE (aid, t, cid));

CREATE INDEX ipCmdIdx ON ipCmd (id, t);
CREATE INDEX ipCmdTempIdx ON ipCmd (t);
CREATE INDEX ipCmdResultIdx ON ipCmdResult (id, t);
CREATE INDEX ipCmdResultTempIdx ON ipCmdResult (t);

/* OBJECT TABLES */

CREATE TABLE ipParents (p VARCHAR(32), pid BIGINT, c VARCHAR(32), cid BIGINT, t TINYINT);

CREATE TABLE ipNumerics (obj VARCHAR(32), id BIGINT, k VARCHAR(32), val NUMERIC, CONSTRAINT omc UNIQUE (obj, id, k));
CREATE TABLE ipStrings (obj VARCHAR(32), id BIGINT, k VARCHAR(32), val LONGVARCHAR, CONSTRAINT otc UNIQUE (obj, id, k));
CREATE TABLE ipBools (obj VARCHAR(32), id BIGINT, k VARCHAR(32), val BOOLEAN, CONSTRAINT olc UNIQUE (obj, id, k));
CREATE TABLE ipDates (obj VARCHAR(32), id BIGINT, k VARCHAR(32), val TIMESTAMP, CONSTRAINT oyc UNIQUE (obj, id, k));
CREATE TABLE ipLinks (obj VARCHAR(32), id BIGINT, k VARCHAR(32), lobj VARCHAR(32), lid BIGINT, CONSTRAINT olnc UNIQUE (obj, id, k));

CREATE TABLE ipNumericArrs (obj VARCHAR(32), id BIGINT, k VARCHAR(32), val NUMERIC ARRAY, CONSTRAINT omac UNIQUE (obj, id, k));
CREATE TABLE ipStringArrs (obj VARCHAR(32), id BIGINT, k VARCHAR(32), val LONGVARCHAR ARRAY, CONSTRAINT otac UNIQUE (obj, id, k));
CREATE TABLE ipBoolArrs (obj VARCHAR(32), id BIGINT, k VARCHAR(32), val BOOLEAN ARRAY, CONSTRAINT olac UNIQUE (obj, id, k));
CREATE TABLE ipDateArrs (obj VARCHAR(32), id BIGINT, k VARCHAR(32), val TIMESTAMP ARRAY, CONSTRAINT oyac UNIQUE (obj, id, k));

CREATE INDEX ipParentsIdx1 ON ipParents (p, pid, c, cid);
CREATE INDEX ipParentsIdx2 ON ipParents (c, cid, p, pid);

/* DATA STORE PROCEDURES */

\.
CREATE PROCEDURE writeToDblNumStore(sid BIGINT, ts TIMESTAMP, v DOUBLE)
MODIFIES SQL DATA
BEGIN ATOMIC
	IF EXISTS (SELECT * FROM ipDynDblNumStore WHERE id = sid) THEN
		UPDATE ipDynDblNumStore SET (t, val) = (ts, v) WHERE id = sid AND t < ts;
	ELSE INSERT INTO ipDynDblNumStore VALUES (sid, ts, v); END IF;
	INSERT INTO ipDblNumStore VALUES (sid, ts, v);
END
.;

\.
CREATE PROCEDURE vwriteToDblNumStore(ids BIGINT ARRAY[65536], tss TIMESTAMP ARRAY[65536], vs DOUBLE ARRAY[65536])
MODIFIES SQL DATA
BEGIN ATOMIC
	DECLARE i INTEGER DEFAULT 1;
	WHILE i <= CARDINALITY(ids) DO
		IF EXISTS (SELECT * FROM ipDynDblNumStore WHERE id = ids[i]) THEN
			UPDATE ipDynDblNumStore SET (t, val) = (tss[i], vs[i]) WHERE id = ids[i] AND t < tss[i];
		ELSE INSERT INTO ipDynDblNumStore VALUES (ids[i], tss[i], vs[i]); END IF;
		INSERT INTO ipDblNumStore VALUES (ids[i], tss[i], vs[i]);
		SET i = i + 1;
	END WHILE;
END
.;

\.
CREATE PROCEDURE writeToRepDblNumStore(sid BIGINT, ts TIMESTAMP, v DOUBLE)
MODIFIES SQL DATA
BEGIN ATOMIC
	IF EXISTS (SELECT * FROM ipRepDynDblNumStore WHERE id = sid) THEN
		UPDATE ipRepDynDblNumStore SET (t, val) = (ts, v) WHERE id = sid AND t < ts;
	ELSE INSERT INTO ipRepDynDblNumStore VALUES (sid, ts, v); END IF;
	INSERT INTO ipRepDblNumStore VALUES (sid, ts, v);
END
.;

\.
CREATE PROCEDURE vwriteToRepDblNumStore(ids BIGINT ARRAY[65536], tss TIMESTAMP ARRAY[65536], vs DOUBLE ARRAY[65536])
MODIFIES SQL DATA
BEGIN ATOMIC
	DECLARE i INTEGER DEFAULT 1;
	WHILE i <= CARDINALITY(ids) DO
		IF EXISTS (SELECT * FROM ipRepDynDblNumStore WHERE id = ids[i]) THEN
			UPDATE ipRepDynDblNumStore SET (t, val) = (tss[i], vs[i]) WHERE id = ids[i] AND t < tss[i];
		ELSE INSERT INTO ipRepDynDblNumStore VALUES (ids[i], tss[i], vs[i]); END IF;
		INSERT INTO ipRepDblNumStore VALUES (ids[i], tss[i], vs[i]);
		SET i = i + 1;
	END WHILE;
END
.;

\.
CREATE PROCEDURE writeToStringStore(sid BIGINT, ts TIMESTAMP, v LONGVARCHAR)
MODIFIES SQL DATA
BEGIN ATOMIC
	IF EXISTS (SELECT * FROM ipDynStringStore WHERE id = sid) THEN
		UPDATE ipDynStringStore SET (t, val) = (ts, v) WHERE id = sid AND t < ts;
	ELSE INSERT INTO ipDynStringStore VALUES (sid, ts, v); END IF;
	INSERT INTO ipStringStore VALUES (sid, ts, v);
END
.;

\.
CREATE PROCEDURE vwriteToStringStore(ids BIGINT ARRAY[65536], tss TIMESTAMP ARRAY[65536], vs LONGVARCHAR ARRAY[65536])
MODIFIES SQL DATA
BEGIN ATOMIC
	DECLARE i INTEGER DEFAULT 1;
	WHILE i <= CARDINALITY(ids) DO
		IF EXISTS (SELECT * FROM ipDynStringStore WHERE id = ids[i]) THEN
			UPDATE ipDynStringStore SET (t, val) = (tss[i], vs[i]) WHERE id = ids[i] AND t < tss[i];
		ELSE INSERT INTO ipDynStringStore VALUES (ids[i], tss[i], vs[i]); END IF;
		INSERT INTO ipStringStore VALUES (ids[i], tss[i], vs[i]);
		SET i = i + 1;
	END WHILE;
END
.;

\.
CREATE PROCEDURE writeToRepStringStore(sid BIGINT, ts TIMESTAMP, v LONGVARCHAR)
MODIFIES SQL DATA
BEGIN ATOMIC
	IF EXISTS (SELECT * FROM ipRepDynStringStore WHERE id = sid) THEN
		UPDATE ipRepDynStringStore SET (t, val) = (ts, v) WHERE id = sid AND t < ts;
	ELSE INSERT INTO ipRepDynStringStore VALUES (sid, ts, v); END IF;
	INSERT INTO ipRepStringStore VALUES (sid, ts, v);
END
.;

\.
CREATE PROCEDURE vwriteToRepStringStore(ids BIGINT ARRAY[65536], tss TIMESTAMP ARRAY[65536], vs LONGVARCHAR ARRAY[65536])
MODIFIES SQL DATA
BEGIN ATOMIC
	DECLARE i INTEGER DEFAULT 1;
	WHILE i <= CARDINALITY(ids) DO
		IF EXISTS (SELECT * FROM ipRepDynStringStore WHERE id = ids[i]) THEN
			UPDATE ipRepDynStringStore SET (t, val) = (tss[i], vs[i]) WHERE id = ids[i] AND t < tss[i];
		ELSE INSERT INTO ipRepDynStringStore VALUES (ids[i], tss[i], vs[i]); END IF;
		INSERT INTO ipRepStringStore VALUES (ids[i], tss[i], vs[i]);
		SET i = i + 1;
	END WHILE;
END
.;
